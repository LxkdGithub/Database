#include <map>
#include <string>
#include <fstream>
#include <json/json.h>
#include "bpt.h"


using namespace std;

int startsWith(string s, string sub)
{
    return s.find(sub) == 0 ? 1 : 0;
}

int endsWith(string s, string sub)
{
    return s.rfind(sub) == (s.length() - sub.length()) ? 1 : 0;
}

string map2jsonstr(const map<string, string> &map_info)
{
    Json::Value jObject;
    for (map<string, string>::const_iterator iter = map_info.begin(); iter != map_info.end(); ++iter)
    {
        jObject[iter->first] = iter->second;
    }
    return jObject.toStyledString();
}

// File structure
// table_name
// fields_count
// 

struct table_file{
    char table_name[20];
    int field_count;
    map<string, string> fields;
};
using Table_Meta = struct table_file;

void CreateFile(string table_name, map<string, string> fields_result){
    Table_Meta t_m;
    fstream tb_f("table_name");
    char buffer[20];
    while(!tb_f.eof()){
        tb_f.getline(buffer, 20);
        if(strcmp(buffer, table_name.c_str()) == 0){
            Error("Table name exists");
        }
    }
    if (table_name.size() > 20)
    {
        Error("Table name length too long!");
    }
    tb_f<< table_name<<endl;

    
    t_m.field_count = fields_result.size();
    strcpy(t_m.table_name, table_name.c_str());
    t_m.fields = fields_result;
    FILE * fp = fopen((const char *)(table_name+".db").c_str(), "rw+");
    
}






